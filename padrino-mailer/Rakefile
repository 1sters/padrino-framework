require 'rubygems'
require 'rake'
require 'sdoc'

GEM_VERSION = File.read(File.dirname(__FILE__) + '/VERSION')

begin
  require 'jeweler'
  Jeweler::Tasks.new do |gem|
    gem.name = "padrino-mailer"
    gem.summary = "Mailer system for padrino"
    gem.description = "Mailer system for padrino allowing easy delivery of application emails"
    gem.email = "padrinorb@gmail.com"
    gem.homepage = "http://github.com/padrino/padrino-framework/tree/master/padrino-mailer"
    gem.authors = ["Padrino Team", "Nathan Esquenazi", "Davide D'Agostino", "Arthur Chiu"]
    gem.rubyforge_project = 'padrino-mailer'
    gem.add_runtime_dependency     "sinatra",       ">= 0.9.2"
    gem.add_runtime_dependency     "padrino-core",  "= #{GEM_VERSION}"
    gem.add_runtime_dependency     "tilt",          ">= 0.2"
    gem.add_runtime_dependency     "tmail",         ">= 1.2"
    gem.add_development_dependency "shoulda",       ">= 2.10.3"
    gem.add_development_dependency "haml",          ">= 2.2.1"
    gem.add_development_dependency "mocha",         ">= 0.9.7"
    gem.add_development_dependency "rack-test",     ">= 0.5.0"
    gem.add_development_dependency "webrat",        ">= 0.5.1"
    # gem is a Gem::Specification... see http://www.rubygems.org/read/chapter/20 for additional settings
  end
  Jeweler::GemcutterTasks.new
  Jeweler::RubyforgeTasks.new { |r| r.doc_task = :none }
rescue LoadError
  puts "Jeweler (or a dependency) not available. Install it with: sudo gem install jeweler"
end

require 'rake/testtask'
Rake::TestTask.new(:test) do |test|
  test.libs << 'test'
  test.pattern = 'test/**/test_*.rb'
  test.verbose = true
end

begin
  require 'rcov/rcovtask'
  Rcov::RcovTask.new do |test|
    test.libs << 'test'
    test.pattern = 'test/**/test_*.rb'
    test.verbose = true
  end
rescue LoadError
  task :rcov do
    abort "RCov is not available. In order to run rcov, you must: sudo gem install spicycode-rcov"
  end
end

# task :test => :check_dependencies

task :default => :test

require 'rake/rdoctask'
Rake::RDocTask.new do |rdoc|
  version = File.exist?('VERSION') ? File.read('VERSION') : ""

  rdoc.rdoc_dir = 'rdoc'
  rdoc.title = "padrino-mailer #{version}"
  rdoc.rdoc_files.include('README*')
  rdoc.rdoc_files.include('lib/**/*.rb')
end
