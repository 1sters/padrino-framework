= Padrino

Padrino is the godfather of Sinatra.

== Preface

This gem has been designed to enhance and build upon Sinatra (http://www.sinatrarb.com).
Sinatra is a DSL for quickly creating web applications in Ruby with minimal effort.
The canonical example of how to create an entire simple web application with Sinatra is something like:

  # myapp.rb
  require 'rubygems'
  require 'sinatra'
  get '/' do
    'Hello world!'
  end
  
and then to run the application:

  $ ruby myapp.rb
  
The extreme simplicity of this framework is quite refreshing. We have been using Sinatra a great deal
for recent projects. First for small and simple json and xml web services and then even
for more complex full-featured applications. This gem represents an attempt to make it as fun and easy
as possible to code increasingly advanced web applications in Sinatra.

== Introduction

Many people love Sinatra's simplicity and lightweight but often quickly come to miss a great deal
of functionality provided by other web frameworks such as Rails when building non-trivial applications.

The obvious question in these cases might be "Why not just use rails then?". This can often be a viable option
but still Rails is quite a large framework with a 'take it or leave it' attitude.
Personally, we have come to love the philosophy of Sinatra which acts as a thin layer on top of rack 
often allowing middleware to do most of the work and pulling in additional complexity only when required. 

My goal with this extension is to match the essence of Sinatra and at the same time create a standard library
of tools, helpers and components that will make Sinatra suitable for more complex applications.

Here is a small list of what Padrino provides:

Generators:: for creating new padrino applications i.e.: <tt>padrino-gen app</tt> or <tt>padrino start</tt> on command line
MultiApp:: unlike other ruby frameworks Padrino is principally designed for mounting multiple apps at the same time.
Routing:: Full url named route support to avoid hardcoding route url paths (<tt>map</tt>, <tt>url_for</tt>)
Tag Helpers:: helpers such as: <tt>tag</tt>, <tt>content_tag</tt>, <tt>input_tag</tt>, ...
Asset Helpers:: helpers such as: <tt>link_to</tt>, <tt>image_tag</tt>, <tt>javascript_include_tag</tt>, ...
Form Helpers:: with builder support such as: <tt>form_tag</tt>, <tt>form_for</tt>, <tt>field_set_tag</tt>, <tt>text_field</tt>, ...
Text Helpers:: useful formatting extensions like: <tt>relative_time_ago</tt>, <tt>js_escape_html</tt>, <tt>sanitize_html</tt>
Mailer:: fast, tiny, delivery support for send templating emails (like ActionMailer do)
Admin:: an ajax admin that displays your records in sortable grids, tree, windows ... as a desktop app can do.

Keep in mind, the user will be able to pull in these components seperately and leave out those that are not required
or use them altogether for a comprehensive upgrade to Sinatra (a full-stack Padrino application).

Note that all work has been created to be compatible with haml, erb, and erubis and that this gem is intended to be 
template-agnostic in providing helpers wherever possible.

Please help me brainstorm and fork the project if you have any ideas to contribute.

== Installation

To install the padrino framework, simply grab the latest version from gemcutter:

  $ sudo gem install padrino --source http://gemcutter.org
  
This will install the necessary padrino gems to get you started.
Now you are ready to use this gem to enhance your sinatra projects or to create new Padrino applications.

== Usage

Padrino is a framework which builds on the existing functionality and Sinatra and provides a variety of 
additional tools and helpers to extend the foundation. This README and Padrino documentation in general will focus
on the enhancements to the core Sinatra functionality. To use Padrino, one should be familiar with the basic 
usage of Sinatra itself. Resources for Sinatra are listed below:

* README (http://www.sinatrarb.com/intro.html)
* Book   (http://www.sinatrarb.com/book.html)
* Repo   (http://github.com/sinatra/sinatra)

Below is a guide to how this gem enhances the Sinatra framework as part of a 'full-stack' padrino application.
For information on how to use a specific gem in isolation within an existing Sinatra project, checkout the README for that 
individual gem or gems.

== Enhanced Base Application (padrino-core)

Sinatra has support for classes which can be extended to create an application: <tt>Sinatra::Base</tt> and <tt>Sinatra::Application</tt>
These classes can be extended in order to create a Sinatra web application. These classes provide support for all the basic
functionality afforded by Sinatra.

Padrino has support for an enhanced base application class <tt>Padrino::Application</tt>. <tt>Padrino::Application</tt>
expands the capabilities of Sinatra::Application and automatically provides the resulting application access to all of
the padrino framework's functionalities. 

Similar in spirit to Sinatra itself, Padrino application layout is extremely flexible and can be as small as a single file.
However, Padrino provides many extensions which improve upon the ability to construct more complex applications.

=== Simple Application Definition

Let us first take a look at the simplest possible Padrino application:

  # app.rb
  PADRINO_ROOT = File.dirname(__FILE__) unless defined? PADRINO_ROOT
  require 'padrino'
  Padrino.load!

  class SimpleApp < Padrino::Application
    set :app_file, __FILE__
  
    get '/ do
      'Hello world'
    end
  end
  
=== Gemfile Dependency Resolution
  
While this is a fully operational Padrino application in itself, let us take a look at Padrino's expanded capabilites. First, 
we can create Gemfile within the application root. This will contain a list of all the dependencies for our application.

  # /Gemfile
  clear_sources
  source 'http://gemcutter.org'
  gem 'sinatra',     :require_as => 'sinatra/base'
  gem 'rack-flash'
  
This file uses the standard <tt>bundler</tt> syntax which can be found here: http://github.com/wycats/bundler
This allows us to place all our dependencies into a single file. Padrino will then automatically require
all necessary files (if they exist on the system). 

If the dependencies are not on the system, you can automatically vendor all necessary gems 
using the <tt>gem bundle</tt> command within the application root. Note that this is all possible without
any further effort than adding the Gemfile (or having this generated automatically with generators explained later).

=== Auto Load Paths

Padrino also intelligently supports requiring useful files within your application automatically and provides
functionality for easily splitting up your application into separate files. Padrino automatically requires <tt>config/database.rb</tt>
as a convention for establishing database connection. Also, any files within the <tt>lib</tt> folder will be required 
automatically by Padrino.

This is powered by the fact that Padrino will automatically load (and reload) any directory patterns within the 'load path'. 
Additional directory patterns can be added to the load path as needed by simply appending to the <tt>load_paths</tt> 
within your application:

  # app.rb
  class SimpleApp < Padrino::Application
    load_paths << ["app/special/*.rb", "some_file.rb"]
  end
  
This will instruct Padrino to autoload these files (and reload them when changes are detected). By default, the load path 
contains certain paths known to contain important files such as controllers, mailers, models, urls, and helpers. 

=== Initializers

Padrino also has support for 'initializers' which are important setup steps or configuration within an application
that should occur during the bootup process. To construct initializers, simply add a file to the <tt>config/initializers<tt>
directory following this convention:

  # config/initializers/example.rb
  module ExampleInitializer
    def self.registered(app)
      # Manipulate 'app' here to register components or adjust configuration
      app.set :environment, :production # just an example configuration change
      app.use Hassle # or even enable middleware
    end
  end
  
Initializers are automatically required and 'registered' during the application startup process. Note that
the name of the module must be the name of the file appended with 'Initializer' (i.e sample.rb => SampleInitializer)

=== Controllers

Suppose we wanted to add additional routes to our Padrino application, and we want to organize the routes
within a more structured layout. Simply add a <tt>controllers</tt> or <tt>app/controllers</tt> folder and create a file as such:

  # controllers/example.rb
  SimpleApp.controllers do
    get "/test" do
      "Text to return"
    end
  end
  
=== Application Logging

Padrino also supports robust logging capabilities. By default, logging information will
go to the STDOUT in development (for use in a console) and in an environment-specific log file <tt>log/development.log</tt>
in test and production environments.

You can modify the logging behavior or disable logging altogether:

  # app.rb
  class SimpleApp < Padrino::Application
    disable :logging     # Turns off logging
    enable  :log_to_file # Forces logging to be written to a file
  end
  
To use the logger within a Padrino application, simply refer to the <tt>logger</tt> method accessible
within your app and any controller or views:

  # controllers/example.rb
  SimpleApp.controllers do
    get("/test") { logger.info "This is a test" }
  end
  
The logger automatically supports severity through the use of <tt>logger.info</tt>, <tt>logger.warn</tt>, <tt>logger.error</tt>, et al.
For more information about the logger, check out the logger rdoc (http://www.ruby-doc.org/stdlib/libdoc/logger/rdoc/)

=== Mounting Applications

Padrino applications are all automatically mountable into other Padrino projects. This means that a given Padrino
project directory can easily mount multiple applications. This allows for better organization of complex applications,
re-usable applications that can be applied (i.e admin, auth, blog) and even more flexibility. 

You can think of mountable applications as a 'full-featured' merb slice or rails engine. Instead of a separate construct, 
any application can simply be packaged and mounted into another project.

Padrino stores application mounting information by default within <tt>config/apps.rb</tt>. This file is intended
to keep all information regarding what applications are mounted to which uri's. An <tt>apps.rb</tt> file has
the following structure:

  Padrino.mount("blog").to("/blog")
  Padrino.mount("website").to("/website")
  
This would mount two applications onto the Padrino project, one served from the '/blog' uri namespace and the other
served from the '/website' uri namespace. Often a Padrino project directory requires a single 'core' application
which is served from the uri root. This can be easily applied with:

  Padrino.mount_core(:app_class => "AppName", :app_file => "app.rb")
  
This will mount a 'core' application with class AppName from the file 'app.rb' to the uri root and will act as a primary
application.

=== Development Reloader

Padrino applications also have the enabled ability to automatically reload all changing application files without
the need to restart the server. Through the use of a customized Rack middleware, all files on the 'load path'
are monitored and reloaded whenever changes are applied. 

This makes rapid development much easier and provides a better alternative to 'shotgun' or 'rerun' 
which require the application server to be restarted which makes requests take much longer to complete.

An application can explicitly enable / disable reloading through the use of options:

  # app.rb
  class SimpleApp < Padrino::Application
    disable :reload # reload is disabled in all environments
    enable  :reload # enabled in all environments
  end
  
By default, reloading is enabled in development and disabled in the test and production environments.

=== Terminal Commands

Padrino also comes equipped with multiple useful terminal commands which can be activated to perform
common tasks such as starting / stopping the application, executing the unit tests or activating an irb session.

The following commands are available:

  # starts the app server (non-daemonized)
  $ padrino start 
  # starts the app server (daemonized) with given port, environment and adapter
  $ padrino start -d -p 3000 -e development -a thin 
  
  # Stops a daemonized app server
  $ padrino stop
  
  # Run all the unit tests
  $ padrino test
  
  # Bootup the Padrino console (irb)
  $ padrino console
  
Using these commands can simplify common tasks making development that much smoother.

== Application Extensions and Helpers (padrino-helpers)

...

== Advanced Routing Support (padrino-routing)

...SimpleApp.urls...
...

== Agnostic Application Generators (padrino-gen)

...

== Simple Mailer Support (padrino-mailer)

...

== Painless Page and Fragment Caching (padrino-cache)

...

== Admin Dashboard and Authentication (padrino-admin)

...
