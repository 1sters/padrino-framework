= Padrino (padrino-core)

Padrino is the godfather of Sinatra.

== Preface

Padrino is a ruby framework built upon the {Sinatra Microframework}[http://www.sinatrarb.com].

Sinatra is a DSL for quickly creating web applications in Ruby with minimal effort. This gem represents an 
attempt to make it as fun and easy as possible to code increasingly advanced web applications in Sinatra.

== Introduction

Many people love Sinatra's simplicity and lightweight but often quickly come to miss a great deal
of functionality provided by other web frameworks such as Rails when building non-trivial applications.

The obvious question in these cases might be "Why not just use rails then?". This can often be a viable option
but still Rails is quite a large framework with a 'take it or leave it' attitude.

Personally, we have come to love the philosophy of Sinatra which acts as a thin layer on top of rack 
often allowing middleware to do most of the work and pulling in additional complexity only when required. 

Our goal with this framework is to match the essence of Sinatra and at the same time create a standard library
of tools, helpers and components that will make Sinatra suitable for more complex applications.

Here is a small list of what Padrino provides:

Generators:: for creating new padrino applications i.e.: <tt>padrino-gen app</tt> or <tt>padrino start</tt> on command line
MultiApp:: unlike other ruby frameworks Padrino is principally designed for mounting multiple apps at the same time.
Routing:: Full url named route, named params, respond_to suppor
Tag Helpers:: helpers such as: <tt>tag</tt>, <tt>content_tag</tt>, <tt>input_tag</tt>, ...
Asset Helpers:: helpers such as: <tt>link_to</tt>, <tt>image_tag</tt>, <tt>javascript_include_tag</tt>, ...
Form Helpers:: with builder support such as: <tt>form_tag</tt>, <tt>form_for</tt>, <tt>field_set_tag</tt>, <tt>text_field</tt>, ...
Text Helpers:: useful formatting extensions like: <tt>relative_time_ago</tt>, <tt>js_escape_html</tt>, <tt>sanitize_html</tt>
Mailer:: fast, tiny, delivery support for send templating emails (like ActionMailer do)
Admin:: an ajax admin that displays your records in sortable grids, tree, windows ... as a desktop app can do.
Logging:: Padrino provide a logger that can interact with your orm or any other library
Reloading:: With padrino is not necessary like other framework start and restart your server for see changes.
I18n:: Padrino has a full support of I18n and can autoset locale.

Keep in mind, the user will be able to pull in these components seperately and leave out those that are not required
or use them altogether for a comprehensive upgrade to Sinatra (a full-stack Padrino application).

Note that all work has been created to be compatible with haml, erb, and erubis and that this gem is intended to be 
template-agnostic in providing helpers wherever possible.

== Installation

To install the padrino framework, simply grab the latest version from gemcutter:

  $ sudo gem install padrino
  
This will install the necessary padrino gems to get you started.
Now you are ready to use this gem to enhance your sinatra projects or to create new Padrino applications.

== Usage

Padrino is a framework which builds on the existing functionality and Sinatra and provides a variety of 
additional tools and helpers to extend the foundation. This README and Padrino documentation in general will focus
on the enhancements to the core Sinatra functionality. To use Padrino, one should be familiar with the basic 
usage of Sinatra itself. Resources for Sinatra are listed below:

* {Sinatra Introduction}[http://www.sinatrarb.com/intro.html]
* {Sinatra Book}[http://www.sinatrarb.com/book.html]
* {Sinatra Github Repo}[http://github.com/sinatra/sinatra]

Below is a guide to how this gem enhances the Sinatra framework as part of a 'full-stack' padrino application.
For information on how to use a specific gem in isolation within an existing Sinatra project, checkout the guide for
{Using Padrino in Sinatra}[http://wiki.github.com/padrino/padrino-framework/standalone-usage-in-sinatra].

== Enhanced Base Application (padrino-core)

Sinatra has support for classes which can be extended to create an application: <tt>Sinatra::Base</tt> and <tt>Sinatra::Application</tt>
These classes can be extended in order to create a Sinatra web application. These classes provide support for all the basic
functionality afforded by Sinatra.

Padrino has support for an enhanced base application class <tt>Padrino::Application</tt>. <tt>Padrino::Application</tt>
expands the capabilities of Sinatra::Application and automatically provides the resulting application access to all of
the padrino framework's functionalities. 

Similar in spirit to Sinatra itself, Padrino application layout is extremely flexible and can be as small as a single file.
However, Padrino provides many extensions which improve upon the ability to construct more complex applications.

=== Simple Application Definition

Let us first take a look at the simplest possible Padrino application:

  # app.rb
  PADRINO_ROOT = File.dirname(__FILE__) unless defined? PADRINO_ROOT
  require 'padrino'
  Padrino.load!

  class SimpleApp < Padrino::Application
    get '/' do
      'Hello world'
    end
    
    # and for read better we can divide with controllers
    controller '/admin' do
      get '/foo' do
        'Im /admin/foo'
      end
    end
  end

=== Enhanced Route Definitions and Controllers

For a complete overview of the routing and controller system, 
check out the {Routing and Controller guide}[http://wiki.github.com/padrino/padrino-framework/controllers]

Suppose we wanted to add additional routes to our Padrino application, and we want to organize the routes
within a more structured layout. Simply add a <tt>controllers</tt> or <tt>app/controllers</tt> folder and create a file as such:

  # Simple Example
  SimpleApp.controllers do
    get "/test" do
      "Text to return"
    end
  end
  
You can also do more complex route definitions:

  # app/controllers/example.rb
  SimpleApp.controllers do
    get :index do
      ...
    end

    get :account do
      # access params[:name] and params[:index]
    end
  end

as well as mapping the route to an explicit url:
  
  # app/controllers/example.rb
  SimpleApp.controllers do
    get :index, :map => '/index' do
      ...
    end

    get :account, :map => '/the/accounts/:name/and/:id' do
      # access params[:name] and params[:index]
    end
  end
  
and also setting the respond_to for a route:
  
  # app/controllers/example.rb
  SimpleApp.controllers :admin do
    get :show, :with => :id, :respond_to => :js do
      "Im /admin/show/#{params[:id]}.#{params[:format]}"
    end

    get :other, with => [:id, :name], respond_to => [:html, :json] do
      case content_type
        when :js    then ... end
        when :json  then ... end
      end
    end
  end
  
For a complete overview of the routing and controller system, 
check out the {Routing and Controller guide}[http://wiki.github.com/padrino/padrino-framework/controllers]
  
=== Rendering

Unlike Sinatra, Padrino supports automatic template lookups such as:

  # searches for 'account/index.{erb,haml,...}
  render 'account/index'
  
This render does not require any template engine to be specified and will choose the first one that is discovered. 
The existing render function works as well if an engine type should be specified:

# example.haml
render :haml, 'account/index'

For a complete overview of the Padrino rendering system, 
check out the {Routing and Controller guide}[http://wiki.github.com/padrino/padrino-framework/controllers]

=== Layout

With Padrino you can (like rails do) use for your custom layout, disable it

  class SimpleApp < Padrino::Application
    
    # Disable layouts
    disable layout
    
    # Use the layout located in views/layouts/custom.haml
    layout :custom
    
For a complete overview of the routing and controller system, 
check out the {Routing and Controller guide}[http://wiki.github.com/padrino/padrino-framework/controllers]

=== Mounting Applications

Padrino applications are all automatically mountable into other Padrino projects. This means that a given Padrino
project directory can easily mount multiple applications. This allows for better organization of complex applications,
re-usable applications that can be applied (i.e admin, auth, blog) and even more flexibility. 

You can think of mountable applications as a 'full-featured' merb slice or rails engine. Instead of a separate construct, 
any application can simply be packaged and mounted into another project.

Padrino stores application mounting information by default within <tt>config/apps.rb</tt>. This file is intended
to keep all information regarding what applications are mounted to which uri's. 

For a complete look at mounting applications within a Padrino project, 
check out the guide on {Mounting Applications}[http://wiki.github.com/padrino/padrino-framework/mounting-applications]

=== Auto Load Paths

Padrino also intelligently supports requiring useful files within your application automatically and provides
functionality for easily splitting up your application into separate files. Padrino automatically requires <tt>config/database.rb</tt>
as a convention for establishing database connection. Also, any files within the <tt>lib</tt> folder will be required 
automatically by Padrino.

For a complete overview of auto-load paths, 
check out the {Padrino Development Guide}[http://wiki.github.com/padrino/padrino-framework/development-and-terminal-commands]

=== Application Logging

Padrino also supports robust logging capabilities. By default, logging information will
go to the STDOUT in development (for use in a console) and in an environment-specific log file <tt>log/development.log</tt>
in test and production environments.
  
To use the logger within a Padrino application, simply refer to the <tt>logger</tt> method accessible
within your app and any controller or views:

  # controllers/example.rb
  SimpleApp.controllers do
    get("/test") { logger.info "This is a test" }
  end
  
For a complete overview of Padrino logger functionality, 
check out the {Padrino Development Guide}[http://wiki.github.com/padrino/padrino-framework/development-and-terminal-commands]

=== Development Reloader

Padrino applications also have the enabled ability to automatically reload all changing application files without
the need to restart the server. Through the use of a customized Rack middleware, all files on the 'load path'
are monitored and reloaded whenever changes are applied. 

This makes rapid development much easier and provides a better alternative to 'shotgun' or 'rerun' 
which require the application server to be restarted which makes requests take much longer to complete.

For a complete overview of code reloading in development, 
check out the {Padrino Development Guide}[http://wiki.github.com/padrino/padrino-framework/development-and-terminal-commands]

=== Terminal Commands

Padrino also comes equipped with multiple useful terminal commands which can be activated to perform
common tasks such as starting / stopping the application, executing the unit tests or activating an irb session.

The following commands are available:

  # starts the app server (non-daemonized)
  $ padrino start 
  # starts the app server (daemonized) with given port, environment and adapter
  $ padrino start -d -p 3000 -e development -a thin 
  
  # Stops a daemonized app server
  $ padrino stop
  
  # Bootup the Padrino console (irb)
  $ padrino console
  
  # Run/List tasks
  $ padrino rake

You can also create custom rake tasks as well. Using these commands can simplify common tasks 
making development that much smoother.

For a complete overview of Padrino terminal commands, 
check out the {Padrino Commands Guide}[http://wiki.github.com/padrino/padrino-framework/development-and-terminal-commands]

== Copyright

Copyright (c) 2010 Padrino. See LICENSE for details.