= padrino-gen

== Installation

To install the 'full-stack' padrino framework, simply grab the latest version from gemcutter:

  $ sudo gem install padrino --source http://gemcutter.org
  
This will install the necessary padrino gems to get you started.
Now you are ready to use this gem to enhance your sinatra projects or to create new Padrino applications.
  
== Overview

Padrino comes preloaded with flexible code generators for Sinatra powered in part by the excellent 
Thor gem (incidentally also used in the Rails 3 generators). These generators are intended to allow for easy code 
generation both in creating new applications and building on existing ones. The generators have been built to be as 
library-agnostic as possible, supporting a myriad of test frameworks, js libraries, mocking libraries, etc. 

The usage for the generator is quite simple:

  $ padrino-gen <the_app_name> </path/to/create/app> --<component-name> <value>

The simplest possible command to generate a base application would be:

  $ padrino-gen demo_app .
  
This would construct a Sinatra application DemoApp (which extends from Sinatra::Application) 
inside the folder 'demo_app' at our current path. Inside the application there would be configuration and 
setup performed for the default components.

You can also define specific components to be used:

  $ padrino-gen demo_app . --test=rspec --renderer=haml --mock=rr --script=jquery --orm datamapper
  
There is also support for aliases for each component within the command:

  $ padrino-gen demo_app . -t=rspec -r=haml -m=rr -s=jquery -d=datamapper
  
The available components and their default options are listed below:

* test:     <tt>bacon</tt>  (default), <tt>shoulda</tt>, <tt>rspec</tt>, <tt>testspec</tt>, <tt>riot</tt>
* renderer: <tt>erb</tt>    (default), <tt>haml</tt>
* mock:     <tt>mocha</tt>  (default), <tt>rr</tt>
* script:   <tt>jquery</tt> (default), <tt>prototype</tt>, <tt>rightjs</tt>
* orm:      <tt>datamapper</tt> (default), <tt>mongomapper</tt>, <tt>activerecord</tt>, <tt>sequel</tt>, <tt>couchrest</tt>

The generator uses the <tt>bundler</tt> gem to resolve any application dependencies when the application is newly created.
The necessary bundler command can be executed automatically through the generator with

  $ padrino-gen demo_app . --run_bundler # alias -b

or this can be done manually through executing command <tt>gem bundle</tt> in the terminal at the root of the generated application.
If not executed manually, the bundling will be performed automatically the first time the application attempts to boot.
Note that this command only has to be performed when the application is first generated or when the Gemfile is modified.
 
The generator framework within padrino is extensible and additional components and tools can be added easily.
This would be achieved through forking our project and reading through the code in <tt>/generators/sinatra_generator.rb</tt> and
the setup instructions inside the relevant files within <tt>/generators/components/</tt>. We are happy to accept pull requests
for additional component types not originally included (although helping us maintain them would also be appreciated).

We are also planning to add generator actions such as:

* Model generation (working for any of the available orms listed)
* Routes generation
* Mailer generation
* Migrations generation

See the wiki article for additional information: <...WIKI...>

== Copyright

Copyright (c) 2009 Padrino. See LICENSE for details.
