= TODO

== UNSORTED

=== IMPORTANT

* We need to fix the parent Rakefile to support bumping versions and publishing each gem (?)
* Creating and migrating databases using padrino binary (or rake and using any of the orms)
* Fix documentation (README, wiki) for each gem (overview in padrino and standalone usage in each subgem)
* Helpers for check_box_group, radio_button_group which create a set of checkboxes or radio buttons
* Helpers for form.fields_for (one-to-one, nested and many associations like in rails)

=== TESTING / POLISHING

* Defining inline named routes inside app.rb files (get :show, :map => '...") cause an error
* Test that controller, mailer, migration and model generators work properly
* Make sure reloader middleware works for urls, models, controllers and all application files
* Decide what to do about initializers (where do they go single app, multiple apps)
* Verify logging works properly and can be accessed from any controller (and with specified severity)
* Make sure that mailer works and perhaps port over (http://github.com/benprew/pony) for use instead
* If you define routes directly inside of the application class (app.rb) routes are not reloaded (?)
  - class Demo < Padrino::Application; get("/example"); end
* If you define controller inside the app file, causes infinite loading loop
  - class Demo < Padrino::Application; end + Demo.controllers { ... }

=== IDEAS

* Respond_to support? a way to respond to multiple content formats (xml, json, html) within a single action (?)
* Mustache template rendering (classes / views using forms, markup) in render/helpers
* Clean up log line for controller request access description to have more information
* Implement before/after filters which run on only specified routes [ before :only => [:show, "/account"] { ... } ]
* Route 'resource' mapping: map(:user).resource
* Internationalization baked in (http://r18n.rubyforge.org/#sinatra)
* Asynchronous commands baked in (http://github.com/deadprogrammer/spork)
* Capistrano deploy tasks baked in (http://github.com/nakajima/capinatra)
* Job Queue support with http://github.com/adamcooke/resque (or http://github.com/bmizerany/sinatra-dj)
* Move the mounting process (for multiple apps) to use rack-mount (http://github.com/josh/rack-mount)
* Refactor mailer to use adv_attr_accessor (for from, to, subject) methods

== NATHAN

* Add generator support for mounting subapplications
* Add support for migration generator types based on components
  - fix the number prefix on migrations (http://guides.rubyonrails.org/migrations.html#whats-in-a-name)
  - allow for special names to be interpreted (http://guides.rubyonrails.org/migrations.html#creating-a-standalone-migration)
* Add support for configuring generators model, controller, migrations, mailer
  * Which components to use, where to generate the files
* Add support for destroying existing controller, model, migrations, mailer
* Add support for specifying 'actions' within controller and mailer migrations
  * padrino-gen controller User :index [:admin, :index]
  * padrino-gen mailer User method1 method2 method3
* Implement padrino-cache gem functionality
* Add helpers to helpers gem:
  * ajax helpers (http://github.com/rails/rails/blob/master/actionpack/lib/action_view/helpers/ajax_helper.rb)
  * add ajax adapters for the various js components (rightjs, jquery, prototype)
  * Add an application.js file with app generator for javascript

== DAddYE

* Add tests for padrino_core gem (and any other gems - generators and routing)
* Optimize (improve performance) padrino_core gem
* Implement padrino-admin gem (with authentication)
  * Check another way for build json configurations instead of rjs

== COMPLETED

* Add app generator to specify orm=none, test=none, script=none
* We need to remove dependency on activesupport (and use support_lite to work with extlib or as)
* Implement Basic padrino-core padrino file for tasks (start, stop, test, console)
* Add initial support for controller, model, mailer generator types
* Added initial Reloading support extracted from Rack::Reloader
* Routing (add autogenerated urls and routes) [see message discussion]
  * get(:show, :map => "/show/action/:id")
  * Add tests making sure the extended 'get' function works [ get(:show, :map => "/show/action/:id") ]
  * Add tests for Padrino::Application.controllers :namespace functionality inside routing controller ext
* Moved over all the gems to jeweler with built in rake tasks releases, testing, versioning, etc
* Added gems to their own repos and added them back to test-app as submodules
* Added over existing tests and make them pass for each gem
* Made the padrino-gen at least have tests pass and fixed errors (still needs a lot of work)
* Added the padrino bin file to padrino-core using Thor to stub out support for the commands (still need to be implemented)
* Added support for test task outside in lib/padrino which runs all tests for all the subgems