= TODO

== UNSORTED

=== GENERAL

* Fix documentation (README, wiki) for each gem (overview in padrino and standalone usage in each subgem)
* Helpers for form.fields_for (one-to-one, nested and many associations like in rails)
* Decide what to do about initializers (where do they go single app, multiple apps)
* Port over plugins for sequel, activerecord, and datamapper (and create equivalents for couchdb and mongo)
  - http://github.com/merb/merb_datamapper/ + http://github.com/zapnap/mogo/
  - http://github.com/merb/merb_sequel + http://github.com/rtomayko/sinatra-sequel/
  - http://github.com/merb/merb_activerecord + http://github.com/bmizerany/sinatra-activerecord/
  * support for an 'annotate' function that labels the models and tests for AR, DM, and SQ about which columns they have
  * Add support for working migrations with AR, DM, Sequel (rake db:migrate or thor)

=== TESTING / POLISHING

* Test that controller, mailer, migration and model generators work properly
* Make sure reloader middleware works for urls, models, controllers, views and all application files
* Verify logging works properly and can be accessed from any controller (and with specified severity)

=== IDEAS

* Respond_to support? a way to respond to multiple content formats (xml, json, html) within a single action (?)
* Mustache template rendering (classes / views using forms, markup) in render/helpers
* Implement before/after filters which run on only specified routes [ before :only => [:show, "/account"] { ... } ]
* Route 'resource' mapping: map(:user).resource (creates RESTful route aliases for resource)
* Internationalization baked in (http://r18n.rubyforge.org/#sinatra)
* Asynchronous commands baked in (http://github.com/deadprogrammer/spork)
* Capistrano deploy tasks baked in (http://github.com/nakajima/capinatra)
* Job Queue support with http://github.com/adamcooke/resque (or http://github.com/bmizerany/sinatra-dj)
* Move the mounting process (for multiple apps) to use rack-mount (http://github.com/josh/rack-mount)
* Refactor mailer to use adv_attr_accessor (for from, to, subject) methods
* Use better logger in Padrino application (replace Logger with vendored Log4R for more flexibility)
* Support for an asset_auto_include type system where certain css/js are included on certain templates (?)
* Replace all alias_method_chain with (http://github.com/Gimi/overridable)
* Replace custom console with modified version of (http://github.com/sickill/racksh/blob/master/README.markdown)